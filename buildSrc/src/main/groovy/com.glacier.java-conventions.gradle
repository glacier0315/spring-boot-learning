plugins {
    id 'java'
}

// 指定仓库
repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/jcenter' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/spring' }
    maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

configurations {
    // 全局排除依赖
    configureEach {
        exclude group: "junit", module: "junit"
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.0')
}

// 设置编码为UTF-8
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    doFirst {
        options.compilerArgs += [
                '--module-path', classpath.asPath
        ]
    }
}

// 设置编码为UTF-8
tasks.withType(Javadoc).configureEach {
    options {
        encoding "UTF-8"
        version true
    }
}

// Copy LICENSE
tasks.withType(Jar).configureEach {
    from(project.rootDir) {
        include 'LICENSE'
        into 'META-INF'
    }
}

// 设置测试环境
tasks.withType(Test).configureEach {
    useJUnitPlatform() {
        excludeEngines 'junit-vintage'
    }
}

// 配置 创建源文件夹
tasks.register("mkdirs") {
    sourceSets*.java.srcDirs*.forEach(f -> {
        f.mkdirs()
    })
    sourceSets*.resources.srcDirs*.forEach(f -> {
        f.mkdirs()
    })
}

// 拷贝jar包
tasks.register('copyJars', Copy) {
//    def buildDir = project.layout.buildDirectory.get().asFile
    def jarsDir = project.layout.buildDirectory.dir("jars").get().asFile
    // 运行时
    from configurations.runtimeClasspath
    // 目标位置
    into jarsDir
}

//配置 删除文件夹
def cleanTempFiles = tasks.register("cleanTempFiles") {
    doLast {
        delete "out"
        delete "logs"
        delete "bin"
        delete ".settings"
        delete ".classpath"
        delete ".project"
    }
}

tasks.named("clean") {
    dependsOn(cleanTempFiles)
}
