server:
  port: 8081
  servlet:
    encoding:
      # 修改编码
      charset: UTF-8
      force: true
      enabled: true

# spring的datasource等配置未贴出
spring:
  profiles:
    active: dev
  datasource:
    name: mysql1
    type: com.zaxxer.hikari.HikariDataSource
  quartz:
    job-store-type: jdbc # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    jdbc:
      initialize-schema: never
    wait-for-jobs-to-complete-on-shutdown: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    overwrite-existing-jobs: false # QuartzScheduler启动时更新己存在的Job,这样就不用每次修改targetObject后删除qrtz_job_details表对应记录
    # 添加 Quartz Scheduler 附加属性
    properties:
      org:
        quartz:
          # 数据源
          dataSource:
            globalJobDataSource:
              # URL必须大写
              URL: jdbc:mysql://192.168.10.130:3306/quartz?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=UTF-8&useSSL=false
              driver: com.mysql.cj.jdbc.Driver
              maxConnections: 5
              username: root
              password: root
              # 必须指定数据源类型
              provider: hikaricp
          scheduler:
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
          # JobStore 相关配置
          jobStore:
            dataSource: globalJobDataSource # 使用的数据源
            class: org.quartz.impl.jdbcjobstore.JobStoreTX # JobStore 实现类
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_ # Quartz 表前缀
            isClustered: true  # 是集群模式
            clusterCheckinInterval: 1000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            useProperties: false
          # 线程池相关
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10 # 线程数
            threadPriority: 5 # 线程优先级
            threadsInheritContextClassLoaderOfInitializingThread: true
