/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
// 配置所有项目
allprojects {
    apply plugin: 'java-library'
    apply from: "$rootDir/version.gradle"

    // 指定jdk版本
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.glacier'
    description = 'spring-boot-learning'

    // 指定仓库
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenCentral()
    }

    // 设置编码为UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    javadoc {
        options{
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
        }
    }

    //配置 删除文件夹
    task cleanTempFiles {
        doLast {
            delete "out"
            delete "logs"
        }
    }
    clean.dependsOn cleanTempFiles

    // 配置 创建源文件夹
    task mkdirs {
        sourceSets*.java.srcDirs*.each {
            it.mkdirs()
        }
        sourceSets*.resources.srcDirs*.each {
            it.mkdirs()
        }
    }
    // 拷贝jar包
    task copyJars(type: Copy) {
        // 运行时
        from configurations.runtimeClasspath
        // 目标位置
        into "$buildDir/libs"
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-actuator')
        developmentOnly("org.springframework.boot:spring-boot-devtools")

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
    }
}
